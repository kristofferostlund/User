{
/*
	 // Place your snippets for CoffeeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
  "Print to console": {
    "prefix": "_log",
    "body": [
      "console.log $1"
    ],
    "description": "Log output to console"
  },
  "For loop (element in array)": {
    "prefix": "fori",
    "body": [
      "for ${1:element} in ${2:collection}",
      "  $3"
    ]
  },
  "For loop (index in [0..n]": {
    "prefix": "forii",
    "body": [
      "for ${1:i} in [${3:0}..${2:n}]",
      "  ${4:arr}[${1:i}]"
    ]
  },
  "For loop (index in [0..collection.length]": {
    "prefix": "foril",
    "body": [
      "for ${1:i} in [${3:0}..${2:arr}.length]",
      "  ${2:arr}[${1:i}]"
    ]
  },
  "Query mongoose db": {
    "prefix": "resFind", 
    "body": [
      "${1:Document}.${2:find} ${3:options}, (err, ${4:element}) ->",
      "  if err then ${5:handleError res, err}",
      "  $7",
      "  ${6:res.status(200).json} ${4:element}"
    ]
  },
  "Query mongoose db": {
    "prefix": "pFind", 
    "body": [
      "${1:Document}.${2:find} ${3:options}, (err, ${4:element}) ->",
      "  if err then return ${5:reject err}",
      "  $7",
      "  resolve ${4:element}"
    ]
  },
  "angular http post request": {
    "prefix": "httpPost",
    "body": [
      "###",
      "@param {${3:Type}} ${2:params}",
      "@param {Function} callback - optional",
      "@return {Promise}",
      "###",
      "${1:name}: (${2:params}, callback) ->",
      "  $q (resolve, reject) ->",
      "    $http.${4:post} 'api/${5:url}', { ${2:params}: ${2:params} }",
      "    .success (${6:data}) ->",
      "      resolve ${6:data}",
      "      callback? ${6:data}",
      "    .error (err) ->",
      "      reject err",
      "      callback? err"
    ]
  },
  "angular http get request": {
    "prefix": "httpGet",
    "body": [
      "###",
      "@param {String} ${2:params}",
      "@param {Function} callback - optional",
      "@return {Promise}",
      "###",
      "${1:name}: (${2:params}, callback) ->",
      "  $q (resolve, reject) ->",
      "    $http.${4:get} \"api/${5:url}/#{${2:params}}\"",
      "    .success (${6:data}) ->",
      "      resolve ${6:data}",
      "      callback? ${6:data}",
      "    .error (err) ->",
      "      reject err",
      "      callback? err"
    ]
  },
  "new Promise": {
    "prefix": "prom",
    "body": [
      "new Promise (resolve, reject) ->",
      "  $1"
    ]
  },
  "$q ->": {
    "prefix": "_q",
    "body": [
      "$q (resolve, reject) ->",
      "  $1"
    ]
  },  
  "Directory scope variable": {
    "prefix": "dAttr",
    "body": [
      "${1:attr}: '='"
    ]
  },
  ".then and .catch stuff": {
    "prefix": "thenCatch",
    "body": [
      ".then (${1:res}) ->",
      "  console.log ${1:res}",
      "  scope.${1:res} = ${1:res}",
      ".catch (err) ->",
      "  console.log err"
    ]
  },
  "Mongoose find": {
    "prefix": "_find",
    "body": [
      "${1:Document}.${2:find} ${3:options}, (err, ${4:element}) ->",
      "  if err then ${5:handleError}",
      "  $6"
    ]
  }
}